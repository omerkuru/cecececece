import { StatusBar } from 'expo-status-bar';
import { Dimensions, StyleSheet, Text, View } from 'react-native';

import { Canvas, Circle, Path, Skia, useSharedValueEffect, useValue } from '@shopify/react-native-skia';
import Animated, {
  useAnimatedStyle,
  useSharedValue,
} from "react-native-reanimated";
import {
  Gesture,
  GestureDetector,
  GestureHandlerRootView,
} from "react-native-gesture-handler";
import { polar2Canvas } from "react-native-redash";

const {width, height} = Dimensions.get("window")


export default function App() {

  const strokeWidth = 20
  const center = width / 2
  const r = (width - strokeWidth) / 2 - 40
  const startAngel = 390 / 180 * Math.PI
  const endAngel = 150 / 180 * Math.PI

  const x1 = center + r * Math.cos(startAngel)
  const y1 = r * Math.sin(startAngel) + center
  const x2 = center + r * Math.cos(endAngel)
  const y2 = r * Math.sin(endAngel) + center


  const movableCx = useSharedValue(x2);
  const movableCy = useSharedValue(y2);
  const previousPositionX = useSharedValue(x2);
  const previousPositionY = useSharedValue(y2);
  const percentComplete = useSharedValue(0);

  const skiaCx = useSharedValue(x2);
  const skiaCy = useSharedValue(y2);
  const skiaPercentComplete = useSharedValue(0);

  console.log(x1, y1, r * Math.cos(startAngel), startAngel)

  const backgroundPath = `M ${x1} ${y1} A ${r} ${r} 0 1 0 ${x2} ${y2}`
  const skiaBackgroundPath = Skia.Path.MakeFromSVGString(backgroundPath)

  const gesture = Gesture.Pan()
    .onUpdate(({ translationX, translationY, absoluteX }) => {
      const oldCanvasX = translationX + previousPositionX.value;
      const oldCanvasY = translationY + previousPositionY.value;

      const xPrime = oldCanvasX - center;
      const yPrime = -(oldCanvasY - center);
      const rawTheta = Math.atan2(yPrime, xPrime);

      let newTheta;

      if (rawTheta < 0 && rawTheta > -endAngel) {
        console.log(rawTheta)
        newTheta = -endAngel;
      } else if (absoluteX > width / 2 && rawTheta <= 0) {
        newTheta = 0;
      } else {
        newTheta = rawTheta;
      }

      if(rawTheta < 0 && rawTheta < -endAngel)
        console.log(rawTheta + 2 * Math.PI)

      const percent = 1 - newTheta / Math.PI;
      percentComplete.value = percent;

      const newCoords = polar2Canvas(
        {
          theta: newTheta,
          radius: r,
        },
        {
          x: center,
          y: center,
        }
      );

      movableCx.value = newCoords.x;
      movableCy.value = newCoords.y;
      skiaCx.value = newCoords.x;
      skiaCy.value = newCoords.y;
    })
    .onEnd(() => {
      previousPositionX.value = movableCx.value;
      previousPositionY.value = movableCy.value;
    });

  


  if(!backgroundPath)
    return <View/>
  
  return (
    <GestureHandlerRootView style={styles.container}>
      <GestureDetector gesture={gesture}>
        <View style={styles.container}>
          <View style={styles.ghost}/>
          <Canvas style={styles.canvas}>
              <Path
                path={skiaBackgroundPath}
                style="stroke"
                strokeWidth={strokeWidth}
                strokeCap="round"
                color="yellow"
              />
              <Circle
                  cx={skiaCx}
                  cy={skiaCy}
                  r={20}
                  color="orange"
                  style="fill"
                />
            </Canvas>
        </View>
      </GestureDetector>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  canvas: {
    flex: 1,
  },
  cursor: {
    backgroundColor: "green",
  },
  ghost: {
    flex: 1,
    backgroundColor: "black",
    justifyContent: "center",
    alignItems: "center",
  },
});
