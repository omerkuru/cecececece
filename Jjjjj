extern "C" {
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "nimble/ble.h"
#include "host/ble_hs.h"
#include "host/ble_gatt.h"
#include "host/util/util.h"
#include "services/gap/ble_svc_gap.h"
#include "services/gatt/ble_svc_gatt.h"
}

#define DEVICE_NAME "ESP32_NimBLE_Server"
#define CUSTOM_SERVICE_UUID BLE_UUID16_DECLARE(0x1811) // Custom service
#define CUSTOM_CHARACTERISTIC_UUID BLE_UUID16_DECLARE(0x2A56) // Custom characteristic

static int gatt_svr_chr_access_custom(uint16_t conn_handle,
                                      uint16_t attr_handle,
                                      struct ble_gatt_access_ctxt *ctxt,
                                      void *arg);

static const struct ble_gatt_chr_def gatt_chr_custom[] = {
    {
        .uuid = &CUSTOM_CHARACTERISTIC_UUID.u,
        .access_cb = gatt_svr_chr_access_custom,
        .flags = BLE_GATT_CHR_F_READ | BLE_GATT_CHR_F_WRITE
    },
    {
        0  // No more characteristics in this service
    }
};

static const struct ble_gatt_svc_def gatt_svr_svcs_custom[] = {
    {
        .type = BLE_GATT_SVC_TYPE_PRIMARY,
        .uuid = &CUSTOM_SERVICE_UUID.u,
        .characteristics = gatt_chr_custom
    },
    {
        0  // No more services
    }
};

static int gatt_svr_chr_access_custom(uint16_t conn_handle,
                                      uint16_t attr_handle,
                                      struct ble_gatt_access_ctxt *ctxt,
                                      void *arg) {
    
    uint16_t uuid = ble_uuid_u16(ctxt->chr->uuid);
    
    if(uuid == 0x2A56) {
        switch(ctxt->op) {
            case BLE_GATT_ACCESS_OP_READ_CHR: {
                char message[] = "Hello from ESP32";
                os_mbuf_append(ctxt->om, message, sizeof(message));
                return 0;
            }
            case BLE_GATT_ACCESS_OP_WRITE_CHR: {
                uint8_t buf[24]; // Buffer to hold received message
                os_mbuf_copydata(ctxt->om, 0, sizeof(buf), buf);
                // Process received data in buf as needed
                return 0;
            }
            default:
                assert(0);
                return BLE_ATT_ERR_UNLIKELY;
        }
    } else {
        return BLE_ATT_ERR_UNLIKELY;
    }
}

extern "C" void ble_app_on_sync(void) {
    ble_svc_gap_device_name_set(DEVICE_NAME);
    ble_gatts_count_cfg(gatt_svr_svcs_custom);
    ble_gatts_add_svcs(gatt_svr_svcs_custom);
}

extern "C" void app_main(void) {
    int err = 0;
    // Initialize NimBLE host task
    err = ble_hs_start();
    assert(err == 0);

    // Initialize and configure the NimBLE host
    err = ble_svc_gap_init();
    assert(err == 0);

    err = ble_svc_gatt_init();
    assert(err == 0);
    
    // Synchronize host and controller after all configurations are set
    ble_hs_cfg.sync_cb = ble_app_on_sync;
}
